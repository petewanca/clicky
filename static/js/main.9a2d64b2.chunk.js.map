{"version":3,"sources":["components/Card.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","this","className","style","height","width","key","id","src","alt","Component","Nav","currentScore","topScore","App","state","images","chosenCards","shuffleCards","i","length","j","Math","floor","random","handleImageClick","event","preventDefault","console","log","target","userSelection","includes","alert","setState","push","setAttribute","backgroundImage","backgroundRepeat","backgroundSize","map","image","href","onClick","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MA8BeA,G,uLAzBX,IAAMC,EAAQC,KAAKD,MASnB,OAEE,yBAAKE,UAAU,eACb,yBAAKC,MATO,CACRC,OAAQ,IACRC,MAAO,KAQPH,UAAU,6DACVI,IAAKN,EAAMO,GACXC,IAAKR,EAAMQ,IACXC,IAAKT,EAAMS,W,GAnBJC,cCoBJC,E,iLAjBX,IAAMX,EAAQC,KAAKD,MAEnB,OACE,yBAAKE,UAAU,+BACb,yBAAKA,UAAU,kCACb,6CACA,6GAEF,yBAAKA,UAAU,uBACb,8CAAmB,gCAASF,EAAMY,eAClC,0CAAe,gCAASZ,EAAMa,iB,GAbtBH,aCsHHI,E,2MAhHbC,MAAQ,CACNC,SACAJ,aAAc,EACdC,SAAU,EACVI,YAAa,I,EAIfC,aAAe,SAACF,GACZ,IAAK,IAAIG,EAAIH,EAAOI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEjB,CAACH,EAAOK,GAAIL,EAAOG,IAA3CH,EAAOG,GAFkC,KAE9BH,EAAOK,GAFuB,O,EAMhDI,iBAAmB,SAAAC,GACjBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,QAElB,IAAIC,EAAgBL,EAAMI,OACtBb,EAAc,EAAKF,MAAME,YAGxBA,EAAYe,SAASD,EAActB,KAaD,IAA5B,EAAKM,MAAMH,cACpBqB,MAAM,wBACN,EAAKC,SAAS,CACVtB,aAAc,EACdC,SAAU,EACVI,YAAa,MAORA,EAAYe,SAASD,EAActB,OAC5CwB,MAAM,+BAGF,EAAKlB,MAAMH,aAAe,EAAKG,MAAMF,UACvC,EAAKqB,SAAS,CACZrB,SAAU,EAAKE,MAAMH,eAGzB,EAAKsB,SAAS,CACZtB,aAAc,EAEdK,YAAa,KAGf,EAAKC,aAAaF,KAtClBC,EAAYkB,KAAKJ,EAActB,KAC/BsB,EAAcK,aAAa,KAAM,WACjCR,QAAQC,IAAIZ,GAEZ,EAAKiB,SAAS,CACZtB,aAAc,EAAKG,MAAMH,aAAa,M,wEAsCjC,IAAD,OAUR,OACA,yBAAKT,MARc,CACfkC,gBAAiB,+FACjBC,iBAAkB,YAClBC,eAAgB,UAMlB,kBAAC,EAAD,CACE3B,aAAcX,KAAKc,MAAMH,aACzBC,SAAUZ,KAAKc,MAAMF,WAErB,yBAAKX,UAAU,YAAYI,IAAI,iBAC7B,yBAAKJ,UAAU,MAAMI,IAAI,YAEnBL,KAAKc,MAAMC,OAAOwB,IAAI,SAAAC,GAAK,OACzB,uBACEC,KAAK,IACLC,QAAS,EAAKlB,iBACdnB,IAAKmC,EAAMlC,GACXL,UAAU,wBAEV,kBAAC,EAAD,CACEI,IAAKmC,EAAMlC,GACXA,GAAIkC,EAAMlC,GACVC,IAAKiC,EAAMA,MACXhC,IAAKgC,EAAMG,iB,GApGflC,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.9a2d64b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n\n  render () {\n    const props = this.props\n\n    const styles = {\n        imageStyle: {\n            height: 190,\n            width: 190\n        }\n    };\n      \n    return (\n\n      <div className='text-center'>\n        <img style={styles.imageStyle}\n            className='clicky m-3 border border-dark rounded text-center bg-light'\n            key={props.id}\n            src={props.src}\n            alt={props.alt}\n        /> \n      </div>\n\n    )\n  }\n    \n}\n\nexport default Card;","import React, { Component } from 'react'\n\nclass Nav extends Component {\n  \n  render() {\n    const props = this.props\n\n    return (\n      <div className='row py-3 bg-dark text-light'>\n        <div className='offset-lg-1 col-lg-5 text-left'>\n          <h1>Anime Clicky!</h1>\n          <p>Click images to earn points. Don't click an image more than once or you lose.</p>\n        </div>\n        <div className='col-lg-5 text-right'>\n          <h2>Current Score: <strong>{props.currentScore}</strong></h2>\n          <h2>Top Score: <strong>{props.topScore}</strong></h2>  \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport images from './images'; // array of image objects\nimport './App.css'; // default styling\nimport Card from './components/Card'; // sends images to DOM\nimport Nav from './components/Nav'; //\n\nclass App extends Component {\n\n  state = {\n    images,\n    currentScore: 0,\n    topScore: 0,\n    chosenCards: []\n  };\n \n  // credit @ https://javascript.info/task/shuffle\n  shuffleCards = (images) => {\n      for (let i = images.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [images[i], images[j]] = [images[j], images[i]];\n      }\n  }\n\n  handleImageClick = event => {\n    event.preventDefault();\n    console.log(event.target);\n    \n    let userSelection = event.target;\n    let chosenCards = this.state.chosenCards\n    \n    // if chosenCards state does not contain user selection, continue\n    if (!chosenCards.includes(userSelection.alt)) {\n        \n      chosenCards.push(userSelection.alt); \n      userSelection.setAttribute('id', 'clicked')\n      console.log(chosenCards);\n\n      this.setState({\n        currentScore: this.state.currentScore+1\n      })\n\n      // this.shuffleCards(images)\n\n    // check current score for win event\n    } else if (this.state.currentScore === 9) {\n      alert('You win, play again.');\n      this.setState({\n          currentScore: 0,\n          topScore: 9,\n          chosenCards: []\n      })\n\n      // this.shuffleCards(images)\n\n    // game over scenario, if the chosenCards state contains user selection\n    // reset state back to 0 across the board\n    } else if (chosenCards.includes(userSelection.alt)) {\n      alert('You lose, please try again.')\n\n      // check/set state top score\n      if (this.state.currentScore > this.state.topScore) {\n        this.setState({\n          topScore: this.state.currentScore\n        })\n      }\n      this.setState({\n        currentScore: 0,\n        // topScore: 0,\n        chosenCards: []\n      })\n\n      this.shuffleCards(images)\n    } \n  };\n\n\n  render () {\n\n    const style = {\n      backgroundStyle: {\n        backgroundImage: 'url(https://hdwallsource.com/img/2015/7/grey-grunge-wallpaper-46683-48106-hd-wallpapers.jpg)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover'\n      }\n    };\n\n    return (\n    <div style={style.backgroundStyle}>\n      <Nav \n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n      />\n        <div className='container' key='mainContainer' >\n          <div className='row' key='imageRow'>\n              {\n                this.state.images.map(image => (\n                  <a \n                    href='/' \n                    onClick={this.handleImageClick} \n                    key={image.id}\n                    className='col-lg-4 text-center'\n                  >\n                    <Card\n                      key={image.id}\n                      id={image.id}\n                      src={image.image}\n                      alt={image.name}\n                    />      \n                  </a>\n                ))\n              }\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}